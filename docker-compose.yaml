services:
  Master1:
    image: hadoop-image:01
    hostname: Master1
    container_name: Master1

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 512M
    ports:
      - "8004:9870" #UI
      - "8003:8088" #UI
      - "16010:16010"
      - "9090:9090"

    volumes:
      - ./data/:/data/
      - ./code/:/code/
      - jn1:/opt/hadoop/journal
      - nn1:/opt/hadoop/name
      - zk1:/opt/zookeeper/data
    networks:
      - hadoop_cluster
    healthcheck:
      test: [ "CMD", "nc", "-z", "Master1", "9870" ]
      interval: 10s
      timeout: 5s
      retries: 7
    restart: always
  Master2:
    image: hadoop-image:01
    hostname: Master2
    container_name: Master2
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 512M
    volumes:
      - ./data/:/data/
      - ./code/:/code/
      - jn2:/opt/hadoop/journal
      - nn2:/opt/hadoop/name
      - zk2:/opt/zookeeper/data
    ports:
      - "8002:9870"
      - "8001:8088"
      - "16011:16010"

    networks:
      - hadoop_cluster
    healthcheck:
      test: [ "CMD", "nc", "-z", "Master2", "9870" ]
      interval: 10s
      timeout: 5s
      retries: 7
    restart: always
  Master3:
    image: hadoop-image:01
    hostname: Master3
    container_name: Master3

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 512M
    volumes:
      - ./data/:/data/
      - ./code/:/code/
      - jn3:/opt/hadoop/journal
      - nn3:/opt/hadoop/name
      - zk3:/opt/zookeeper/data
    ports:
      - "8000:9870"
      - "8009:8088"
      - "16012:16010"

    networks:
      - hadoop_cluster
    healthcheck:
      test: [ "CMD", "nc", "-z", "Master3", "9870" ]
      interval: 10s
      timeout: 5s
      retries: 7
    restart: always
  Worker1:
    image: hadoop-image:01
    hostname: Worker1
    container_name: Worker1

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 512M
    volumes:
      - ./data/:/data/
      - ./code/:/code/
      - sn1:/opt/hadoop/data
    networks:
      - hadoop_cluster
    healthcheck:
      test: [ "CMD", "nc", "-z", "Worker1", "9866" ]
      interval: 10s
      timeout: 5s
      retries: 7
    restart: always
    depends_on:
      Master1:
        condition: service_healthy
      Master2:
        condition: service_healthy
      Master3:
        condition: service_healthy

  Worker2:
    image: hadoop-image:01
    hostname: Worker2
    container_name: Worker2

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 512M
    volumes:
      - ./data/:/data/
      - ./code/:/code/
      - sn2:/opt/hadoop/data
    networks:
      - hadoop_cluster
    healthcheck:
      test: [ "CMD", "nc", "-z", "Worker2", "9866" ]
      interval: 10s
      timeout: 5s
      retries: 7
    restart: always
    depends_on:
      Master1:
        condition: service_healthy
      Master2:
        condition: service_healthy
      Master3:
        condition: service_healthy
  Worker3:
    image: hadoop-image:01
    hostname: Worker3
    container_name: Worker3

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 512M
    volumes:
      - ./data/:/data/
      - ./code/:/code/
      - sn3:/opt/hadoop/data
    networks:
      - hadoop_cluster
    healthcheck:
      test: [ "CMD", "nc", "-z", "Worker3", "9866" ]
      interval: 10s
      timeout: 5s
      retries: 7
    restart: always
    depends_on:
      Master1:
        condition: service_healthy
      Master2:
        condition: service_healthy
      Master3:
        condition: service_healthy
networks:
  hadoop_cluster:
    driver: bridge
volumes:
  jn1:
  nn1:
  zk1:
  jn2:
  nn2:
  zk2:
  jn3:
  nn3:
  zk3:
  sn1:
  sn2:
  sn3:

  postgres_data:


